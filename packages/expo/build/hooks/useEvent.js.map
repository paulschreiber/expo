{"version":3,"file":"useEvent.js","sourceRoot":"","sources":["../../src/hooks/useEvent.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAmB5C;;;;;;;GAOG;AACH,MAAM,UAAU,QAAQ,CAMtB,OAAiC,EACjC,KAAiB,EACjB,eAAmC,EAAE;IAErC,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,QAAQ,CAC5C,YAAY,CACb,CAAC;IAEF,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,QAAQ,GAAG,CAAC,GAAG,IAAgC,EAAE,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC/E,MAAM,YAAY,GAAG,OAAO,CAAC,WAAW,CAAa,KAAK,EAAE,QAAkC,CAAC,CAAC;QAEhG,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;IACrC,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;IAErB,OAAO,WAAkE,CAAC;AAC5E,CAAC","sourcesContent":["import type { EventEmitter } from 'expo-modules-core/types';\nimport { useEffect, useState } from 'react';\n\ntype AnyEventListener = (...args: any[]) => any;\n\ntype InferEventName<TEventsMap> =\n  TEventsMap extends Record<infer TEventName extends keyof TEventsMap, AnyEventListener>\n    ? TEventName\n    : never;\n\ntype InferEventListener<TEventsMap, TEventName extends keyof TEventsMap> =\n  TEventsMap extends Record<TEventName, infer TEventListener extends AnyEventListener>\n    ? TEventListener\n    : never;\n\ntype InferEventParameters<TEventListener extends AnyEventListener, TInitialValue> =\n  TInitialValue extends Parameters<TEventListener>\n    ? Parameters<TEventListener>\n    : Parameters<TEventListener> | TInitialValue | [];\n\n/**\n * React hook that listens to events emitted by the given object. The returned value is an array of event parameters\n * that get updated whenever a new event is dispatched.\n * @param emitter An object that emits events, e.g. a native module or shared object or an instance of [`EventEmitter`](#eventemitter).\n * @param event Name of the event to listen to.\n * @param initialValue An array of event parameters to use until the event is called for the first time.\n * @returns An array of arguments passed to the event listener.\n */\nexport function useEvent<\n  TEventsMap extends Record<string, AnyEventListener>,\n  TEventName extends InferEventName<TEventsMap>,\n  TEventListener extends InferEventListener<TEventsMap, TEventName>,\n  TInitialValue extends Parameters<TEventListener> | [],\n>(\n  emitter: EventEmitter<TEventsMap>,\n  event: TEventName,\n  initialValue: TInitialValue | [] = []\n): InferEventParameters<TEventListener, TInitialValue> {\n  const [eventParams, setEventParams] = useState<Parameters<TEventListener> | TInitialValue | []>(\n    initialValue\n  );\n\n  useEffect(() => {\n    const listener = (...args: Parameters<TEventListener>) => setEventParams(args);\n    const subscription = emitter.addListener<TEventName>(event, listener as TEventsMap[TEventName]);\n\n    return () => subscription.remove();\n  }, [emitter, event]);\n\n  return eventParams as InferEventParameters<TEventListener, TInitialValue>;\n}\n"]}